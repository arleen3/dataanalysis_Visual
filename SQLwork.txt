-- Setup. DO NOT REMOVE.
.headers on
.separator ','

DROP TABLE IF EXISTS movies;
DROP TABLE IF EXISTS movie_cast;
DROP VIEW IF EXISTS good_collaboration;
DROP TABLE IF EXISTS movie_overview;

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (a.i) Create tables

-- [insert your SQL statement(s) BELOW this line]

CREATE TABLE movies(
id integer,
name text,
score integer
);

CREATE TABLE movie_cast(
movie_id integer,
cast_id integer,
cast_name text
);

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.tables
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (a.ii) Import data

-- [insert your SQLite command(s) BELOW this line]
.import movie-name-score.txt movies
.import movie-cast.txt movie_cast

-- [insert your SQLite command(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.headers off
SELECT COUNT(*) FROM movies;
SELECT COUNT(*) FROM movie_cast;
.headers on
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (b) Create indexes

-- [insert your SQL statement(s) BELOW this line]

CREATE INDEX scores_index ON movies(score);
CREATE INDEX cast_index ON movie_cast(cast_id);
CREATE INDEX movie_index ON movies(id);

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.indexes
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (c) Calculate a proportion

-- [insert your SQL statement(s) BELOW this line]

SELECT 100* 1.0 * COUNT(score)/ (SELECT COUNT(score) FROM movies) AS prop
FROM movies
where score > 50;

-- [insert your SQL statement(s) ABOVE this line]


-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (d) Find the highest scoring movies

-- [insert your SQL statement(s) BELOW this line]

SELECT id, name, score 
FROM movies
ORDER BY score DESC, name ASC
LIMIT 7;

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (e) Find the most prolific actors

-- [insert your SQL statement(s) BELOW this line]

SELECT cast_id, cast_name, COUNT(movie_id) as movie_count
FROM movie_cast
GROUP BY cast_id
ORDER BY movie_count DESC, cast_name ASC
LIMIT 5; 

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (f) Get high scoring actors

-- [insert your SQL statement(s) BELOW this line]

SELECT cast_id, cast_name, 
       	(SELECT avg(score) 
       	FROM movies
	WHERE movies.id IN
		(SELECT movie_id
		FROM movie_cast AS movc
		WHERE movc.cast_id=fmovc.cast_id )
	AND score>=50) as ave
FROM movie_cast as fmovc
GROUP BY fmovc.cast_id
HAVING count(fmovc.movie_id) > 2
ORDER BY ave DESC, fmovc.cast_name ASC
LIMIT 10;		 

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (g) Creating views

-- [insert your SQL statement(s) BELOW this line]


CREATE VIEW good_collaboration AS 
SELECT DISTINCT a.cast_id as cast_member_id1,  b.cast_id as cast_member_id2, count(a.movie_id) as movie_count,  avg(m.score) as  average_movie_score
FROM movie_cast as a
INNER JOIN movie_cast as b
ON a.cast_id != b.cast_id AND a.cast_id< b.cast_id AND a.movie_id= b.movie_id
INNER JOIN movies m ON a.movie_id = m.id AND m.score>=40
GROUP BY a.cast_id, b.cast_id;

SELECT cast_member_id1, cast_member_id2, movie_count, average_movie_score 
FROM good_collaboration 
WHERE movie_count>= 3;


-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.headers off
PRAGMA table_info(good_collaboration);
SELECT AVG(average_movie_score) FROM good_collaboration;
.headers on
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (h) Find the best collaborators

-- [insert your SQL statement(s) BELOW this line]

SELECT DISTINCT a.cast_member_id1 as cast_id, cast_name, AVG(b.average_movie_score) as collaboration_score
FROM good_collaboration AS a
INNER JOIN movie_cast  c
ON a.cast_member_id1 = c.cast_id
INNER JOIN good_collaboration b
ON a.cast_member_id1=b.cast_member_id1 OR a.cast_member_id1= b.cast_member_id2 
WHERE a.movie_count>= 3
GROUP BY a.cast_member_id1
ORDER BY collaboration_score DESC, cast_name ASC
LIMIT 5;


-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (i) Create FTS table and import data

-- [insert your SQL statement(s) BELOW this line]


CREATE VIRTUAL TABLE  movie_overview USING fts3(id integer,name text,year integer, overview text, popularity decimal);

.import movie-overview.txt movie_overview


-- [insert your SQL statement(s) ABOVE this line]

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (i.1) Count movies with "fight"

-- [insert your SQL statement(s) BELOW this line]

SELECT COUNT(id) 
FROM movie_overview
WHERE overview MATCH 'fight OR Fight OR fight OR fight.';


-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (i.2) List movies with "love" and "story" nearby

-- [insert your SQL statement(s) BELOW this line]

SELECT id
FROM movie_overview
WHERE overview MATCH 'love NEAR/5 story';

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --